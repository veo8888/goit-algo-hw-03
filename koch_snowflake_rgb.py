import turtle
import colorsys

def koch_curve(t, order, size, color_fn):
    """
    Рекурсивно малює криву Коха.

    Параметри:
    t (turtle.Turtle): Об'єкт turtle, що використовується для малювання.
    order (int): Глибина рекурсії кривої Коха.
    size (float): Довжина поточного сегмента.
    color_fn (function): Функція, що повертає колір для поточного сегмента.
    """
    if order == 0:  # Базовий випадок: малюємо пряму лінію.
        t.color(color_fn())  # Встановлюємо колір для поточного сегмента.
        t.forward(size)  # Переміщуємо turtle вперед на вказану відстань.
    else:
        # Рекурсивний випадок: розділяємо сегмент на менші частини.
        for angle in [60, -120, 60, 0]:
            koch_curve(t, order - 1, size / 3, color_fn)  # Рекурсивно малюємо менші сегменти.
            t.left(angle)  # Змінюємо напрямок для наступного сегмента.

def draw_koch_curve(order, size=600):
    """
    Малює сніжинку Коха, використовуючи криву Коха.

    Параметри:
    order (int): Глибина рекурсії сніжинки Коха.
    size (float): Розмір початкового трикутника.
    """
    def color_gradient():
        """
        Генерує градієнт кольору за допомогою моделі кольорів HSV.
        """
        nonlocal hue  # Використовуємо зовнішню змінну hue.
        hue += hue_step  # Збільшуємо hue для градієнта.
        if hue > 1:  # Забезпечуємо, щоб hue залишався в межах [0, 1].
            hue -= 1
        return colorsys.hsv_to_rgb(hue, 1, 1)  # Перетворюємо HSV у RGB.

    # Ініціалізація налаштувань градієнта кольорів.
    hue = 0  # Початковий відтінок (червоний).
    hue_step = 1 / (3 ** order * 4)  # Розрахунок кроку градієнта залежно від глибини рекурсії.

    # Налаштування вікна для малювання.
    window = turtle.Screen()
    window.bgcolor("white")  # Встановлюємо білий колір фону.

    # Ініціалізація turtle.
    t = turtle.Turtle()
    t.speed(0)  # Встановлюємо максимальну швидкість turtle.
    t.penup()
    t.goto(-300, 180)  # Переміщуємо до початкової позиції без малювання.
    t.pendown()
    t.width(2)  # Встановлюємо ширину лінії.

    # Малювання сніжинки Коха (трикутник із кривих Коха).
    for _ in range(3):
        koch_curve(t, order, size, color_gradient)  # Малюємо одну сторону сніжинки.
        t.right(120)  # Поворот до наступної сторони трикутника.

    window.mainloop()  # Тримати вікно відкритим, поки користувач не закриє його.

def main():
    """
    Основна функція програми. Дає можливість користувачеві вибрати глибину рекурсії.
    """
    try:
        # Запитуємо глибину рекурсії у користувача.
        order = int(input("\033[33m Введіть глибину рекурсії для сніжинки Коха (наприклад, 3):\033[0m "))
        if order < 0:
            print("\033[35m Глибина рекурсії не може бути від'ємною.\033[0m")
            return
        draw_koch_curve(order)
    except ValueError:
        print("\033[35m Будь ласка, введіть ціле число.\033[0m")

if __name__ == "__main__":
    main()